<?php

namespace {{{vendor}}}\{{{module_name}}}\Block\Adminhtml\{{{entity}}}\Edit\Tab;

/**
 * Banner edit form main tab
 */
class Form extends \Magento\Backend\Block\Widget\Form\Generic implements \Magento\Backend\Block\Widget\Tab\TabInterface
{
    /**
     * @var \Magento\Store\Model\System\Store
     */
    protected $_systemStore;

    protected $wysiwyg;

    /**
     * Form constructor.
     * @param \Magento\Backend\Block\Template\Context $context
     * @param \Magento\Framework\Registry $registry
     * @param \Magento\Framework\Data\FormFactory $formFactory
     * @param \Magento\Store\Model\System\Store $systemStore
     * @param \Magento\Cms\Model\Wysiwyg\Config $wysiwyg
     * @param array $data
     */
    public function __construct(
        \Magento\Backend\Block\Template\Context $context,
        \Magento\Framework\Registry $registry,
        \Magento\Framework\Data\FormFactory $formFactory,
        \Magento\Store\Model\System\Store $systemStore,
        \Magento\Cms\Model\Wysiwyg\Config $wysiwyg,
        array $data = []
    ) {
        $this->_systemStore = $systemStore;
        $this->wysiwyg = $wysiwyg;
        parent::__construct($context, $registry, $formFactory, $data);
    }

    /**
     * Prepare form
     * @return $this
     */
    protected function _prepareForm()
    {
        /* @var $model \{{{vendor}}}\Services\Model\Service */
        $model = $this->_coreRegistry->registry('{{{entity_lower}}}');

        $isElementDisabled = false;

        /** @var \Magento\Framework\Data\Form $form */
        $form = $this->_formFactory->create();

        $form->setHtmlIdPrefix('page_');

        $fieldset = $form->addFieldset('base_fieldset', ['legend' => __('Edit Information')]);

        if ($model->getId()) {
            $fieldset->addField('id', 'hidden', ['name' => 'id']);
        }

        $config = $this->wysiwyg->getConfig();
        $config->addData([
            'settings' => [
                'theme_advanced_buttons1' => "bold,italic,justifyleft,justifycenter,justifyright,|,formatselect,fontselect,fontsizeselect,|,forecolor,backcolor,|,link,unlink,|,bullist,numlist,|,code",
                'theme_advanced_buttons2' => NULL,
                'theme_advanced_buttons3' => NULL,
                'theme_advanced_buttons4' => NULL,
                'theme_advanced_statusbar_location' => NULL
            ]
        ]);

        $fieldset->addField(
            'description',
            'editor',
            [
                'name' => 'description',
                'label' => __('{{{entity}}} description'),
                'title' => __('{{{entity}}} description'),
                'config'    => $config,
                'wysiwyg'   => true
            ]
        );

        $fieldset->addType("diy_image", "{{{vendor}}}\{{{module_name}}}\Block\Adminhtml\Preview");
        $fieldset->addField(
            'picture',
            'diy_image',
            [
                'label'     => __('Save {{{entity}}} logo'),
                'required'  => false,
                'note' => 'Allow image type: jpg, jpeg, gif, png',
                'renderer' => '{{{module_name_underscore}}}/adminhtml_image',
                'name'      => 'logo',
            ]
        );

        if (!$model->getId()) {
            $model->setData('is_active', $isElementDisabled ? '0' : '1');
        }

        $form->setValues($model->getData());
        $this->setForm($form);
		
        return parent::_prepareForm();
    }

    /**
     * Prepare label for tab
     *
     * @return \Magento\Framework\Phrase
     */
    public function getTabLabel()
    {
        return __('Edit Information');
    }

    /**
     * Prepare title for tab
     *
     * @return \Magento\Framework\Phrase
     */
    public function getTabTitle()
    {
        return __('Edit Information');
    }

    /**
     * {@inheritdoc}
     */
    public function canShowTab()
    {
        return true;
    }

    /**
     * {@inheritdoc}
     */
    public function isHidden()
    {
        return false;
    }

    /**
     * Check permission for passed action
     *
     * @param string $resourceId
     * @return bool
     */
    protected function _isAllowedAction($resourceId)
    {
        return $this->_authorization->isAllowed($resourceId);
    }
    
    public function getTargetOptionArray(){
    	return array(
    				'_self' => "Self",
					'_blank' => "New Page",
    				);
    }
}
